% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/helpers.R
\name{corrautocorr}
\alias{corrautocorr}
\title{Generate Autocorrelated Time Series from Matrix Normal Distribution}
\usage{
corrautocorr(mu, sigR, sigC, Tt, verboseflag = TRUE)
}
\arguments{
\item{mu}{Numeric vector. Expected values, of length equal to the number of time series required.}

\item{sigR}{Numeric matrix or scalar. Covariance matrix between time series. If two univariate time series
are required, a scalar indicating the off-diagonal elements suffices.}

\item{sigC}{Numeric vector, list of vectors, or matrix. Covariance of columns (serial correlation).
\itemize{
\item If a vector, it is converted to a Toeplitz matrix for universal AC structure across all time series.
\item If a list of vectors, each vector specifies the autocorrelation structure for a specific time series.
\item If a matrix, it is treated as a universal AC structure for all time series.
}}

\item{verboseflag}{Logical. If TRUE, warnings about non-PSD matrices will be printed. Default is TRUE.}

\item{ndp}{Integer. Number of data points (length of time series).}
}
\value{
A numeric matrix where each row represents a time series.
}
\description{
This function generates time series with specified autocorrelation and cross-correlation structures
by sampling from a Matrix Normal Distribution using Cholesky decomposition. It handles non-PSD matrices
by converting them to the nearest positive semi-definite (PSD) matrix.
}
\examples{
# Example 1: Single autocorrelation structure for all time series
ts1 <- corrautocorr(c(0, 0), 0.6, c(0.6, 0.3, 0.2), 1000)
cor(ts1)

# Example 2: Different autocorrelation structures for each time series
sigC_list <- list(c(0.6, 0.3, 0.2), c(0.5, 0.25, 0.1))
ts2 <- corrautocorr(c(0, 0), 0.6, sigC_list, 1000)
cor(ts2)

}
\references{
Higham, N. J. (1988). Computing the nearest symmetric positive semi-definite matrix. Linear Algebra and its Applications.
Soroosh Afyouni, Stephen M. Smith, & Thomas E. Nichols (2018). Effective Degrees of Freedom of the Pearson's Correlation Coefficient under Serial Correlation.
}
